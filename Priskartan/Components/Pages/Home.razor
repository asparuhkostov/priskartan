@page "/"
@rendermode InteractiveServer

@using System.Text.Json
@using System.Text.Unicode
@using System.Text.Encodings.Web
@using Priskartan.Services.SvenskMaeklarstatistik
@using Priskartan.Services.Eon

@inject IJSRuntime JS
@inject IEonService EonService
@inject ISvenskMaeklarstatistikService SvenskMaeklarstatistikService

<PageTitle>Priskartan</PageTitle>
<head>
    <script src="https://d3js.org/d3.v6.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</head>

@if (!string.IsNullOrEmpty(dataLoadingError))
{
    <div class="alert alert-danger" role="alert">
        @(dataLoadingError)
    </div>
}
else
{
    <div class="d-flex flex-column align-items-center mt-3 mb-3">
        <div class="text-center">
            <h2>Bostadspriser (medel per region)</h2>
            <div class="d-flex flex-column align-items-center">
                <svg id="real-estate-prices-map" width="370" , height="700"></svg>
            </div>
            <div>
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse"
                        data-bs-target="#real-estate-prices-table" aria-expanded="false" aria-controls="real-estate-prices-table">
                    Show details
                </button>
                <div class="collapse mt-2" id="real-estate-prices-table">
                    <div class="card card-body">
                        <table>
                            <tbody>
                                @foreach (var (region, price) in averageRealEstatePrices)
                                {
                                    <tr>
                                        <td><b>@(region)</b></td>
                                        <td>@(price)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="text-center mt-5">
            <h2>Elpris</h2>
            <div class="d-flex flex-column align-items-center">
                <svg id="electricity-prices-map" width="370" , height="700"></svg>
            </div>
            <div>
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse"
                        data-bs-target="#electricity-prices-table" aria-expanded="false" aria-controls="electricity-prices-table">
                    Show details
                </button>

                <div class="collapse mt-2" id="electricity-prices-table">
                    <div class="card card-body">
                        <table>
                            <tbody>
                                @foreach (var (region, price) in electricityPricePerRegion)
                                {
                                    <tr>
                                        <td><b>@(region)</b></td>
                                        <td>@(price)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    function displayMap(svgSelector, data, lowerBound, upperBound) {
        // The svg
        const svg = d3.select(svgSelector),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        // Map and projection
        const projection = d3.geoMercator()
            .center([18, 63]) // GPS location
            .scale(1200) // Zoom
            .translate([width / 2, height / 2])

        var color = d3.scaleLinear([lowerBound, upperBound], ["green", "red"]);

        var priceData = JSON.parse(data);

        // Load external data and boot
        d3.json("https://localhost:7149/swedish_regions.json").then(function (data) {
            // Draw the map
            svg.append("g")
                .selectAll("path")
                .data(data.features)
                .join("path")
                .attr("fill", d => color(priceData[d.properties.name] ?? 0))
                .attr("d", d3.geoPath()
                    .projection(projection)
                )
                .style("stroke", "black")
        })
    }

    document.displayMap = displayMap;
</script>

@code {
    private bool _isInitialized = false;
    private Dictionary<string, double> electricityPricePerRegion { get; set; } = new();
    private Dictionary<string, int> averageRealEstatePrices { get; set; } = new();
    private string dataLoadingError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // TO-DO: Replace with Result-object based handling.
        // TO-DO: Add CancellationToken usage
        try
        {
            electricityPricePerRegion = await EonService.GetSpotPricePerRegionAsync();
            averageRealEstatePrices = SvenskMaeklarstatistikService.GetRealEstatePriceData();
        }
        catch
        {
            dataLoadingError = "Could not load the pricing data";
        }
        _isInitialized = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isInitialized)
        {
            // TO-DO: Add CancellationToken usage
            await LoadMapDataAsync("#electricity-prices-map", electricityPricePerRegion, 5, 100);
            await LoadMapDataAsync("#real-estate-prices-map", averageRealEstatePrices, 1000000, 5000000);
        }
    }

    private async Task LoadMapDataAsync(string svgSelector, object priceData, int lowerBound, int upperBound)
    {
        var data = JsonSerializer.Serialize(
            priceData,
            new JsonSerializerOptions { Encoder = JavaScriptEncoder.Create(UnicodeRanges.All) }
        );

        await JS.InvokeVoidAsync("document.displayMap", svgSelector, data, lowerBound, upperBound);
    }
}