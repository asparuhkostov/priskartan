@page "/"
@rendermode InteractiveServer

@using System.Text.Json
@using System.Text.Unicode
@using System.Text.Encodings.Web
@using Priskartan.Services.SvenskMaeklarstatistik
@using Priskartan.Services.Eon

@inject IJSRuntime JS
@inject IEonService EonService
@inject ISvenskMaeklarstatistikService SvenskMaeklarstatistikService

<PageTitle>Priskartan</PageTitle>
<head>
    <script src="https://d3js.org/d3.v6.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</head>

<div class="d-flex flex-column align-items-center">
    <div class="text-center">
        <h2>Bostadspriser (medel per region)</h2>
        <div class="d-flex align-items-center">
            <div class="d-flex flex-column align-items-center">
                <svg id="real-estate-prices-map" width="440" , height="800"></svg>
                <button @onclick="LoadRealEstateMapDataAsync">Load</button>
            </div>
            <table>
                <tbody>
                    @foreach (var (region, price) in averageRealEstatePrices)
                    {
                        <tr>
                            <td><b>@(region)</b></td>
                            <td>@(price)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="mt-3 text-center">
        <h2>Elpris</h2>
        <div class="d-flex align-items-center">
            <div class="d-flex flex-column align-items-center">
                <svg id="electricity-prices-map" width="440" , height="800"></svg>
                <button @onclick="LoadElectricityMapDataAsync">Load</button>
            </div>
            <table>
                <tbody>
                    @foreach (var (region, price) in electricityPricePerRegion)
                    {
                        <tr>
                            <td><b>@(region)</b></td>
                            <td>@(price)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    function displayMap(svgSelector, data, lowerBound, upperBound) {
        // The svg
        const svg = d3.select(svgSelector),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        // Map and projection
        const projection = d3.geoMercator()
            .center([18, 63]) // GPS location
            .scale(1200) // Zoom
            .translate([width / 2, height / 2])
        
        var color = d3.scaleLinear([lowerBound, upperBound], ["green", "red"]);

        var priceData = JSON.parse(data);

        // Load external data and boot
        d3.json("https://localhost:7149/swedish_regions.json").then(function (data) {
            // Draw the map
            svg.append("g")
                .selectAll("path")
                .data(data.features)
                .join("path")
                .attr("fill", d => color(priceData[d.properties.name] ?? 0))
                .attr("d", d3.geoPath()
                    .projection(projection)
                )
                .style("stroke", "none")
        })
    }

    document.displayMap = displayMap;
</script>

@code {
    Dictionary<string, double> electricityPricePerRegion { get; set; } = new();
    Dictionary<string, int> averageRealEstatePrices { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        electricityPricePerRegion = await EonService.GetSpotPricePerRegion();
        averageRealEstatePrices = SvenskMaeklarstatistikService.LoadRealEstatePriceData();

        var data = JsonSerializer.Serialize(
            averageRealEstatePrices,
            new JsonSerializerOptions { Encoder = JavaScriptEncoder.Create(UnicodeRanges.All) }
        );
    }

    private async Task LoadRealEstateMapDataAsync()
    {
        var data = JsonSerializer.Serialize(
            averageRealEstatePrices,
            new JsonSerializerOptions { Encoder = JavaScriptEncoder.Create(UnicodeRanges.All) }
        );

        await JS.InvokeVoidAsync("document.displayMap", "#real-estate-prices-map", data, 1000000, 5000000);
    }

    private async Task LoadElectricityMapDataAsync()
    {
        var data = JsonSerializer.Serialize(
            electricityPricePerRegion,
            new JsonSerializerOptions { Encoder = JavaScriptEncoder.Create(UnicodeRanges.All) }
        );

        await JS.InvokeVoidAsync("document.displayMap", "#electricity-prices-map", data, 5, 100);
    }
}